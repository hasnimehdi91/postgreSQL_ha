services:
{% for i in range(1, (consul_cluster_replica_count | default(3)) + 1) %}
  postgres_ha_consul_{{ i }}:
    container_name: "postgres_ha_consul_{{ i }}"
    build:
      context: ./
      dockerfile: ./Dockerfile.consul
    volumes:
      - "postgres_ha_consul_data_{{ i }}:/consul_data"
      - "{{ consul_config_path }}/server_{{ i }}:/consul_configuration/:ro"
      - "{{ consul_certs_path }}/server_{{ i }}:/consul_certs/:ro"
    networks:
    - postgres_ha_network
    restart: on-failure

{% endfor %}

{% for i in range(1, (postgres_cluster_replica_count | default(3)) + 1) %}
  postgres_ha_node_{{ i }}:
    build:
      context: ./
      dockerfile: ./Dockerfile.postgres
    container_name: "postgres_ha_node_{{ i }}"
    volumes:
      - "{{ postgres_config_path }}/node_{{ i }}/patroni.yml:/etc/patroni/patroni.yml"
      - "{{ postgres_certs_path }}/node_{{ i }}:/consul_certs/:ro"
      - "postgres_ha_node_{{ i }}_data:/var/lib/postgresql/:rw"
    env_file:
      - "{{ containers_dir }}/postgres_ha_node_{{ i }}.env"
    depends_on:
    - postgres_ha_load_balancer
    - postgres_ha_monitoring
{% for i in range(1, (consul_cluster_replica_count | default(3)) + 1) %}
    - "postgres_ha_consul_{{ i }}"
{% endfor %}
    networks:
    - postgres_ha_network
    restart: on-failure

{% endfor %}

  postgres_ha_monitoring:
    image: percona/pmm-server
    container_name: postgres_ha_monitoring
    volumes:
      - "{{ monitoring_config_path }}/dashboards/postgresql-patroni.json:/srv/grafana/plugins/pmm-app/dist/dashboards/Experimental/postgresql-patroni.json:ro"
    networks:
      - postgres_ha_network
    restart: on-failure

  postgres_ha_load_balancer:
    image: haproxy:2.7
    container_name: postgres_ha_load_balancer
    ports:
    - "127.0.0.1:8500:8500"
    - "127.0.0.1:43254:5432"
    - "127.0.0.1:43354:5433"
    - "127.0.0.1:8443:8443"
    volumes:
      - "{{ haproxy_config_path }}/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg:ro"
      - "{{ haproxy_certs_path }}/:/certs/:ro"
    depends_on:
{% for i in range(1, (consul_cluster_replica_count | default(3)) + 1) %}
    - "postgres_ha_consul_{{ i }}"
{% endfor %}
    networks:
    - postgres_ha_network
    restart: on-failure

volumes:
{% for i in range(1, (consul_cluster_replica_count | default(3)) + 1) %}
  postgres_ha_consul_data_{{ i }}:
{% endfor %}
{% for i in range(1, (postgres_cluster_replica_count | default(3)) + 1) %}
  postgres_ha_node_{{ i }}_data:
{% endfor %}

networks:
  postgres_ha_network:
