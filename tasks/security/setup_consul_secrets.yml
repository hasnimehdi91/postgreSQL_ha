# code: language=ansible

# ------------------------------------------------------------------------------
# Define Consul Configuration and Certificate Paths
# ------------------------------------------------------------------------------
# These paths are specific to the Consul service and are used to store:
# - Configuration files for runtime behavior
# - TLS certificates for securing API and gossip communication
# The paths are created inside the container volume root to ensure persistence.
- set_fact:
    consul_config_path: "{{ containers_volume_dir }}/consul/config"
    consul_certs_path: "{{ containers_volume_dir }}/consul/certs"
    certificate_name: consul

# ------------------------------------------------------------------------------
# Create Required Consul Volume Directories
# ------------------------------------------------------------------------------
# Ensures the presence of the directories used by Consul for configuration and certificate storage.
# These are essential for secure agent startup with TLS and encryption enabled.
- name: Create consul volumes
  file:
    path: "{{ item }}"
    state: directory
    recurse: true
  loop:
  - "{{ consul_config_path }}"
  - "{{ consul_certs_path }}"

# ------------------------------------------------------------------------------
# Create Consul Node Configuration Directories
# ------------------------------------------------------------------------------
# This task creates a dedicated configuration directory for each Consul server node.
# The number of directories is based on the value of 'consul_cluster_replica_count'.
# These directories will contain the HCL files (server.hcl, tls.hcl, acl.hcl) for each replica.
- name: Create consul nodes configuration volumes
  file:
    path: "{{ consul_config_path }}/server_{{ item }}"
    state: directory
    recurse: true
  loop: "{{ range(1, (consul_cluster_replica_count | default(3)) + 1) }}"

# ------------------------------------------------------------------------------
# Generate Self-Signed TLS Certificates for All Consul Nodes
# ------------------------------------------------------------------------------
# This task loops over the number of defined Consul replicas and includes
# a reusable task file to generate node-specific TLS assets. Each invocation
# creates a private key, CSR, and a self-signed certificate uniquely configured
# for the corresponding node. The certificates enable secure mutual TLS (mTLS)
# communication between Consul servers and clients in the cluster.
- include_tasks:
    file: "{{ current_dir }}/tasks/security/setup_consul_node_certificate.yml"
  loop: "{{ range(1, (consul_cluster_replica_count | default(3)) + 1) }}"

# ------------------------------------------------------------------------------
# Generate Consul ACL Bootstrap Token
# ------------------------------------------------------------------------------
# This block generates a UUID token to be used as the initial management token
# for Consul's ACL system. The token provides full access and is written into
# each server's configuration to enable secure, deterministic ACL bootstrapping.
# The token should be securely stored and reused across all Consul servers.
- name: "Generate Consul ACL bootstrap token"
  set_fact:
    consul_bootstrap_token: "{{ lookup('ansible.builtin.password', '/dev/null', chars=['ascii_letters', 'digits'], length=32) | trim | to_uuid }}"

# ------------------------------------------------------------------------------
# Generate Consul Gossip Encryption Key (Secure Method)
# ------------------------------------------------------------------------------
# This block securely generates a 16-byte base64-encoded key using /dev/urandom
# and base64 encoding. The key is used for gossip encryption in Consul to secure
# LAN/WAN Serf communication between agents.
# The same key must be applied to all Consul nodes to enable encrypted clustering.
# This approach ensures cryptographic strength suitable for production use.
- name: "Generate secure gossip key using system entropy"
  shell: head -c 16 /dev/urandom | base64
  register: consul_gossip_prng
  changed_when: true
  check_mode: false

# ------------------------------------------------------------------------------
# Set Gossip Encryption Key Fact
# ------------------------------------------------------------------------------
# This task sets the 'consul_gossip_encryption_key' fact using the output
# from the previously executed shell command that generated a secure,
# base64-encoded 16-byte key. The 'trim' filter ensures that any trailing
# newline or whitespace is removed from the command output.
# This fact is used to configure gossip encryption in Consul.
- name: "Set gossip encryption key fact"
  set_fact:
    consul_gossip_encryption_key: "{{ consul_gossip_prng.stdout | trim }}"

# ------------------------------------------------------------------------------
# Copy Consul ACL Configuration to Each Server Node
# ------------------------------------------------------------------------------
# This task renders and copies the ACL configuration template (acl.hcl)
# into each Consul server's configuration directory.
# The loop ensures each server (e.g., server_1, server_2, ...) receives
# its own copy of the configuration with consistent permissions.
- name: Copy Consul ACL configuration
  template:
    src: "{{ current_dir }}/templates/consul/acl.hcl.j2"
    dest: "{{ consul_config_path }}/server_{{ item }}/acl.hcl"
    mode: "0644"
  loop: "{{ range(1, (consul_cluster_replica_count | default(3)) + 1) }}"

# ------------------------------------------------------------------------------
# Copy Consul Server Configuration to Each Server Node
# ------------------------------------------------------------------------------
# This task renders and copies the Consul server configuration template (server.hcl)
# into each node's designated configuration folder.
# The configuration includes node-specific values such as node_name and retry_join,
# and is essential for initializing each Consul server in the cluster.
- name: Copy Consul server configuration
  template:
    src: "{{ current_dir }}/templates/consul/server.hcl.j2"
    dest: "{{ consul_config_path }}/server_{{ item }}/server.hcl"
    mode: "0644"
  loop: "{{ range(1, (consul_cluster_replica_count | default(3)) + 1) }}"
