# code: language=ansible

# ------------------------------------------------------------------------------
# Define Consul Configuration and Certificate Paths
# ------------------------------------------------------------------------------
# These paths are specific to the Consul service and are used to store:
# - Configuration files for runtime behavior
# - TLS certificates for securing API and gossip communication
# The paths are created inside the container volume root to ensure persistence.
- set_fact:
    consul_config_path: "{{ containers_volume_dir }}/consul/config"
    consul_certs_path: "{{ containers_volume_dir }}/consul/certs"
    certificate_name: consul

# ------------------------------------------------------------------------------
# Create Required Consul Volume Directories
# ------------------------------------------------------------------------------
# Ensures the presence of the directories used by Consul for configuration and certificate storage.
# These are essential for secure agent startup with TLS and encryption enabled.
- name: Create consul volumes
  file:
    path: "{{ item }}"
    state: directory
    recurse: true
  loop:
  - "{{ consul_config_path }}"
  - "{{ consul_certs_path }}"

# ------------------------------------------------------------------------------
# Generate Self-Signed TLS Certificate for Consul
# ------------------------------------------------------------------------------
# This includes a reusable task file that generates a private key, CSR, and signed certificate.
# The certificate enables secure mTLS communication between Consul agents and clients.
- include_tasks:
    file: "{{ current_dir }}/tasks/security/generate_services_self_signed_certificate.yml"

# ------------------------------------------------------------------------------
# Copy TLS Certificates to Consul Volume
# ------------------------------------------------------------------------------
# Moves the generated CA certificate, Consul-specific certificate, and private key
# into the Consul certificate directory, making them accessible at runtime.
# These files will be used by the Consul agent to enable encrypted communication.
- name: Copy consul certificates
  copy:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    mode: "0644"
  loop:
  - src: "{{ ca_cert_path }}"
    dest: "{{ consul_certs_path }}/ca.crt"
  - src: "{{ sensitive_directory }}/{{ certificate_name }}.key"
    dest: "{{ consul_certs_path }}/consul.key"
  - src: "{{ sensitive_directory }}/{{ certificate_name }}.crt"
    dest: "{{ consul_certs_path }}/consul.crt"

# ------------------------------------------------------------------------------
# Generate Consul ACL Bootstrap Token
# ------------------------------------------------------------------------------
# This block generates a unique UUID to serve as the bootstrap token for Consul ACLs.
# The token is required for initializing the ACL system and will be written into
# the configuration file used by the Consul server.
# This ensures deterministic, controlled ACL bootstrapping on first startup.
- name: "Generate consul bootstrap token"
  block:
    - set_fact:
        consul_bootstrap_token: "{{ lookup('ansible.builtin.password', '/dev/null', chars=['ascii_letters', 'digits'], length=32) | trim | to_uuid }}"

# ------------------------------------------------------------------------------
# Render Consul ACL Configuration File
# ------------------------------------------------------------------------------
# This task writes the `acl.hcl` file to the Consul configuration directory.
# The rendered file includes:
#   - ACL enablement flags
#   - Bootstrap token
#   - Default policy configuration
#   - Token persistence parameters
# The token value is injected into the template using Jinja2 substitution.
- name: Copy consul configuration
  template:
    src: "{{ current_dir }}/templates/consul/acl.hcl"
    dest: "{{ consul_config_path }}/acl.hcl"
    mode: "0644"