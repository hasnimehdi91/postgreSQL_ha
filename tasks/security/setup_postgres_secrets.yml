# code: language=ansible

# ------------------------------------------------------------------------------
# Define PostgreSQL Configuration and Certificate Paths
# ------------------------------------------------------------------------------
# Sets the paths for the PostgreSQL configuration directory and the TLS
# certificate storage directory. These values are reused throughout the playbook
# to ensure consistency when managing PostgreSQL volumes.
- set_fact:
    postgres_config_path: "{{ containers_volume_dir }}/postgres/config"
    postgres_certs_path: "{{ containers_volume_dir }}/postgres/certs"

# ------------------------------------------------------------------------------
# Create Base PostgreSQL Volume Directories
# ------------------------------------------------------------------------------
# Creates the base directories required for PostgreSQL configuration and
# certificates. The 'recurse' option ensures that all necessary parent directories
# are also created.
- name: Create postgres volumes
  file:
    path: "{{ item }}"
    state: directory
    recurse: true
  loop:
  - "{{ postgres_config_path }}"
  - "{{ postgres_certs_path }}"

# ------------------------------------------------------------------------------
# Create Per-Node PostgreSQL Configuration Directories
# ------------------------------------------------------------------------------
# Creates dedicated configuration directories for each PostgreSQL node based on
# the replica count defined in the cluster. Each node receives its own directory
# under the main configuration path.
- name: Create postgres nodes configuration volumes
  file:
    path: "{{ postgres_config_path }}/node_{{ item }}"
    state: directory
    recurse: true
  loop: "{{ range(1, (postgres_cluster_replica_count | default(3)) + 1) }}"

# ------------------------------------------------------------------------------
# Setup PostgreSQL Node Certificates
# ------------------------------------------------------------------------------
# Includes a reusable task file that handles the generation and placement of TLS
# certificates for each PostgreSQL node. Ensures mTLS support for secure internal
# communication within the PostgreSQL cluster.
- include_tasks:
    file: "{{ current_dir }}/tasks/security/setup_postgres_nodes_certificates.yml"
  loop: "{{ range(1, (postgres_cluster_replica_count | default(3)) + 1) }}"

# ------------------------------------------------------------------------------
# Check for Existing Database Credentials
# ------------------------------------------------------------------------------
# Verifies whether a previously generated database credentials file exists.
# This prevents overwriting existing credentials and ensures repeatable deployments.
- name: Check if database credentials are defined
  stat:
    path: "{{ database_credentials_write_path }}"
  register: database_credentials_write_path_stat

# ------------------------------------------------------------------------------
# Load Existing Database Credentials
# ------------------------------------------------------------------------------
# Loads the database credentials from the file if it exists. This allows
# subsequent tasks to use the same passwords across multiple provisioning runs.
- name: Load database credentials for file
  include_vars:
    file: "{{ database_credentials_write_path }}"
  when: database_credentials_write_path_stat.stat.exists | default(false)

# ------------------------------------------------------------------------------
# Define PostgreSQL Users with Secure Passwords
# ------------------------------------------------------------------------------
# Sets the credentials for the PostgreSQL superuser, replication user, and
# rewind user. Passwords are generated securely at runtime using the Ansible
# password lookup plugin. These users are required for normal operation,
# replication, and cluster recovery scenarios.
- set_fact:
    database_credentials:
      super_user:
        username: postgres
        password: "{{ lookup('ansible.builtin.password', '/dev/null', chars=['ascii_letters', 'digits'], length=32) | trim }}"
      replication_user:
        username: replication
        password: "{{ lookup('ansible.builtin.password', '/dev/null', chars=['ascii_letters', 'digits'], length=32) | trim }}"
      rewind_user:
        username: rewind
        password: "{{ lookup('ansible.builtin.password', '/dev/null', chars=['ascii_letters', 'digits'], length=32) | trim }}"
  when: not (database_credentials_write_path_stat.stat.exists | default(false))

# ------------------------------------------------------------------------------
# Persist Database Credentials to File
# ------------------------------------------------------------------------------
# Writes the generated credentials to a local file for future use. This file
# should be stored securely and reused in subsequent provisioning to ensure
# stable authentication and cluster operation.
- name: "Write database credentials to {{ database_credentials_write_path }}"
  copy:
    dest: "{{ database_credentials_write_path }}"
    content: "{{ { 'database_credentials': database_credentials } | to_nice_yaml(indent=2) }}"
  when: not (database_credentials_write_path_stat.stat.exists | default(false))

# ------------------------------------------------------------------------------
# Deploy Patroni Configuration Files for PostgreSQL Nodes
# ------------------------------------------------------------------------------
# Renders the `patroni.yml` configuration file for each PostgreSQL node using
# a Jinja2 template. The configuration is node-specific and stored under the
# corresponding nodeâ€™s configuration directory. This config file is used by
# Patroni to manage the PostgreSQL high-availability cluster.
- name: Copy postgres patroni configuration
  template:
    src: "{{ current_dir }}/templates/postgres/patroni.yml.j2"
    dest: "{{ postgres_config_path }}/node_{{ item }}/patroni.yml"
    mode: "0644"
  loop: "{{ range(1, (postgres_cluster_replica_count | default(3)) + 1) }}"
